#!/bin/bash

# This script installs/updates the files in the directory this
# script is located, to this machine.
# It uses a file mapping file to configure what files it installs.
# The file mapping is sourced into this script. The file mapping
# must be a bash script that uses the functions defined in this install
# script to define what and how to install the files in this project.

FILE_MAPPING=./file_install_mapping.bash

log_error() {
    printf "$1\n" >&2
}
error() {
    [[ -v 1 ]] && log_error "$1"
    exit 1
}

# Check to make sure running as root
[[ "$EUID" == 0 ]] || error 'Please run as root'

# Syntax:
# (-d|-f) source destination [mode]
#
# (-d|-f): Mandatory flags that define how destination
#     (look below) is interpreted.
#     -d: The destination is a directory, and the source
#     file will be installed in that directory with the same
#     filename as the source.
#     -f: The destination is a full file path. The source
#     will be installed to that exact path.
# source: The file to install / copy from. Only a single file may
#     be specified for this parameter.
# destination: The place to install the file to.
#     Look above on how this is interpreted.
# mode: The permission mode of the destination file.
#     If this isn't provided, the it is derived from the
#     mode of the source file.
install_file() {
    if [[ $# -lt 3 ]] || [[ $# -gt 4 ]]; then
        log_error "expected 3-4 arguments, but got $# arguments."
        return 1
    fi

    local source="$2" destination="$3" mode=

    local part_of_command
    case "$1" in
        '-d')
            part_of_command=('-t' "$destination" "$source")
            ;;
        '-f')
            part_of_command=('-T' "$source" "$destination")
            ;;
        *)
            log_error "expected -d or -f, got $1"
            return 1
            ;;
    esac

    if ! [[ -r "$source" ]]; then
        log_error "the file \"$source\" does not exist or is not readable"
        return 1
    fi

    mode="${4:-$(stat -c %a "$source")}"

    install -DCm "$mode" "${part_of_command[@]}" || {
        log_error "failed to install \"$source\" to \"$destination\" (destination interpreted as $1)"
        return 1
    }
}

# Syntax:
# source... dest_directory [mode]
#
# This function installs an arbitrary number of sources
# to the destination directory provided. The number of sources
# can be zero.
# If mode is provided, all installed files will be set to have
# that mode.
# If dest_directory has a name that can possibly be a mode,
# put something like a "./" in front of it so that it does not
# get confused as a mode by the function.
install_to_directory() {
    local non_source
    if [[ "${!#}" =~ '^[0-7]{3,4}$' ]]; then
        non_source=2
    else
        non_source=1
    fi
    if [[ $# -lt $non_source ]]; then
        log_error "expected at least $non_source arguments, but got $# arguments."
        return 1
    fi
    local num_sources=$(($# - $non_source))
    local sources=("${@:1:$num_sources}")
    shift $num_sources

    local return_status=0
    local source
    for source in "${sources[@]}"; do
        install_file -d "$source" "$@" || return_status=1
    done

    return $return_status
}

cd "$(dirname "$(realpath -e "$0")")" || error 'failed to cd into where install script is located.'

source "$FILE_MAPPING"
