#!/bin/bash

# Returns 0 if the build root variable exists (is not null or unset).
# Returns 1 if it does not exist.
assert_build_root_exists() {
    if [[ -n "$BUILDROOT" ]]; then
        return 0
    else
        error 'BUILDROOT variable is not set'
        return 1
    fi
}

# This function takes username and password pairs
# from stdin in the same format as the chpasswd(8) command
# and updates the passwords of the specified users
# in the initramfs environment.
#
# Parameters:
# [-e|-p]
# -e: supplied password is already encrypted/hashed.
# -p: supplied password is not encrypted.
# If none of these options are supplied, the default
# behavior is to assume -p (passwords are not encrypted).
set_user_passwords() {
    if [[ $# -gt 1 ]]; then
        error "expected 0-1 arguments, but got $# arguments"
        return 1
    fi

    local password_is_encrypted
    if [[ -v 1 ]]; then
        case "$1" in
            '-e')
                password_is_encrypted=true
                ;;
            '-p')
                password_is_encrypted=false
                ;;
            *)
                error "unknown argument \"$1\""
                return 1
                ;;
        esac
    else
        password_is_encrypted=false
    fi

    assert_build_root_exists || return 1

    local file
    for file in "$BUILDROOT"/etc/{passwd,shadow,login.defs}; do
        if ! [[ -e "$file" ]]; then
            error "the file \"$file\" does not exist in the build directory"
            return 1
        fi
    done

    command_str=(chpasswd --root "$BUILDROOT")
    if [[ $password_is_encrypted == true ]]; then
        command_str+=('-e')
    fi

    "${command_str[@]}" || {
        error 'failed to set one or more user passwords'
        return 1
    }
}

build() {
    assert_build_root_exists || return 1

    add_file /etc/login.defs

    # Create /etc/passwd and /etc/shadow in build directory
    # if not already there, and set their file permissions
    # to the permissions of the corresponding files on the
    # root filesystem.
    local native_file
    for native_file in /etc/{passwd,shadow}; do
        local build_dir_file="$BUILDROOT/$native_file"
        touch "$build_dir_file"
        chmod --preserve-root --reference="$native_file" "$build_dir_file"
    done
}

help() {
    cat << EOF
This hook provides helper functions for use in other install hooks,
to manipulate and setup user accounts in the initramfs environment.
To use this hook, place this hook in the hooks section of the
mkinitcpio config. Hooks following this hook in the hooks section
will be able to use the functions defined in this hook.

One use for this hook is to unlock the root account in the
initramfs environment so that the root account can be logged into
in single user / emergency mode. By default, the systemd hook locks
the root account in the initramfs environment, preventing the user
from accessing a console during emergency mode.
EOF
}
